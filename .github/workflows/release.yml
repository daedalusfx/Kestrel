# .github/workflows/release.yml

name: Build and Release Kestrel

# این ورک‌فلو زمانی اجرا می‌شود که یک تگ جدید با پیشوند v (مثل v1.0 یا v1.2.1) پوش شود
on:
  push:
    tags:
      - 'v*'

jobs:
  build-executables:
    # این نام در رابط کاربری GitHub Actions نمایش داده می‌شود
    name: Build for ${{ matrix.os }}
    
    # این بخش باعث می‌شود که کار ما روی سه سیستم‌عامل مختلف اجرا شود
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      # مرحله ۱: گرفتن کدهای پروژه از گیت‌هاب
      - name: Check out repository
        uses: actions/checkout@v3

      # مرحله ۲: نصب پایتون
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10' # می‌توانید نسخه پایتون را تغییر دهید

      # --- مرحله جدید: نصب نیازمندی‌های سیستمی برای لینوکس ---
      - name: Install Linux GUI dependencies (Ubuntu 24.04+)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgl1 \
            libegl1 \
            libxkbcommon-x11-0 \
            libxcb-icccm4 \
            libxcb-image0 \
            libxcb-keysyms1 \
            libxcb-randr0 \
            libxcb-render-util0 \
            libxcb-shape0 \
            libxcb-xfixes0 \
            libxcb-xinerama0

      # مرحله ۳: نصب کتابخانه‌های مورد نیاز پایتون
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller # نصب پکیجر

      # مرحله ۴: ساخت فایل اجرایی با PyInstaller
      - name: Build executable with PyInstaller
        run: |
          # در اینجا 'kestrel.py' نام فایل اصلی برنامه شماست. اگر نام دیگری دارد، آن را تغییر دهید.
          pyinstaller --name kestrel --onefile --windowed kestrel.py

      # مرحله ۵: آماده‌سازی فایل‌ها برای آپلود
      - name: Prepare artifacts for release
        id: prepare_artifacts
        run: |
          # تعیین نام فایل بر اساس سیستم‌عامل
          if [ "${{ runner.os }}" == "Linux" ]; then
            ASSET_NAME="kestrel-linux"
            ASSET_PATH="dist/kestrel"
          elif [ "${{ runner.os }}" == "macOS" ]; then
            ASSET_NAME="kestrel-macos"
            ASSET_PATH="dist/kestrel"
          else # Windows
            ASSET_NAME="kestrel-windows.exe"
            ASSET_PATH="dist/kestrel.exe"
          fi
          
          # فشرده‌سازی فایل برای دانلود راحت‌تر
          if [ "${{ runner.os }}" == "Windows" ]; then
            7z a "${ASSET_NAME}.zip" "${ASSET_PATH}"
            echo "ASSET_PATH=${ASSET_NAME}.zip" >> $GITHUB_OUTPUT
          else
            zip -j "${ASSET_NAME}.zip" "${ASSET_PATH}"
            echo "ASSET_PATH=${ASSET_NAME}.zip" >> $GITHUB_OUTPUT
          fi
          
          echo "ASSET_NAME=${ASSET_NAME}.zip" >> $GITHUB_OUTPUT

      # مرحله ۶: آپلود فایل اجرایی به بخش Releases
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          # این توکن به صورت خودکار توسط گیت‌هاب ساخته می‌شود
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # آدرس آپلود از مرحله ساخت Release گرفته می‌شود
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.prepare_artifacts.outputs.ASSET_PATH }}
          asset_name: ${{ steps.prepare_artifacts.outputs.ASSET_NAME }}
          asset_content_type: application/zip
